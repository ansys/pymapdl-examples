name: CI

on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.7'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  packages: read

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip tox
      - name: Test with tox
        run: tox -e style

  # docs-style:
  #   name: Documentation Style Check
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  
  #     - name: Running Vale
  #       uses: errata-ai/vale-action@reviewdog
  #       env:
  #         GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  #       with:
  #         files: doc
  #         reporter: github-pr-check
  #         level: error
  #         filter_mode: nofilter
  #         fail_on_error: true
  #         vale_flags: "--config=doc/.vale.ini"

  docs:
    name: Documentation
    needs: [style]  #docs-style
    runs-on: ubuntu-latest
    env:
      PYMAPDL_PORT: 21000  # default won't work on GitHub runners
      PYMAPDL_DB_PORT: 21001  # default won't work on GitHub runners
      PYMAPDL_START_INSTANCE: FALSE
      DOCKER_PACKAGE: ghcr.io/pyansys/pymapdl/mapdl
      DOCKER_IMAGE_VERSION_DOCS_BUILD: v22.2.0
      DPF_PORT: 21002

    steps:
      - uses: actions/checkout@v3
     
      - name: "Set up Python using cache"
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pip'
          cache-dependency-path: 'requirements/requirements_doc.txt'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip pandoc libgl1-mesa-glx xvfb texlive-latex-extra latexmk nodejs npm graphviz
          npm install -g @mermaid-js/mermaid-cli

      - name: Install Python requirements
        run: pip install -r requirements/requirements_doc.txt

      - name: Test virtual framebuffer
        run: |
          xvfb-run python .ci/display_test.py
      
      - name: Login in Github Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull, launch, and validate MAPDL service
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          MAPDL_IMAGE: '${{ env.DOCKER_PACKAGE }}:${{ env.DOCKER_IMAGE_VERSION_DOCS_BUILD }}'
        run: .ci/start_mapdl.sh

      - name: Retrieve PyMAPDL version
        run: |
          echo "{PYMAPDL_VERSION}={$(python -c 'from ansys.mapdl.core import __version__; print(__version__)')}" >> $GITHUB_OUTPUT
          echo "PyMAPDL version is: $(python -c "from ansys.mapdl.core import __version__; print(__version__)")"
        id: version
      
      - name: DPF Server Activation
        run: |
          docker pull ghcr.io/pyansys/dpf-core:22.2dev
          docker run -d --name dpfserver -p ${{ env.DPF_PORT }}:50052 ghcr.io/pyansys/dpf-core:22.2dev && echo "DPF Server active on port ${{ env.DPF_PORT }}."
      
      - name: Build Documentation
        run: |
          xvfb-run make -C doc html SPHINXOPTS="-j auto -W --keep-going"
      
      - name: Zip documentation
        run: |
          cd doc/_build/html
          zip -r PyMAPDL_Techdemos_docs.zip *
      
      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v3
        with:
          name: HTML-Documentation
          path: doc/_build/html/PyMAPDL_Techdemos_docs.zip
          retention-days: 7

      - name: Deploy
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: doc/_build/html
          clean: true
          single-commit: true

      - name: Build PDF Documentation
        working-directory: doc
        run: make pdf

      - name: Upload PDF Documentation
        uses: actions/upload-artifact@v3
        with:
          name: PDF-Documentation
          path: doc/_build/latex/pymapdl*.pdf
          retention-days: 7

      - name: Display files structure
        if: always()
        run: |
          mkdir logs-build-docs
          echo "::group:: Display files structure" && ls -R && echo "::endgroup::"
          ls -R > ./logs-build-docs/files_structure.txt
      
      - name: Display docker files structures
        if: always()
        run: |
          echo "::group:: Display files structure" && docker exec mapdl /bin/bash -c "ls -R" && echo "::endgroup::"
          docker exec mapdl /bin/bash -c "ls -R" > ./logs-build-docs/docker_files_structure.txt
      
      - name: Collect MAPDL logs on failure
        if: always()
        run: |
          docker exec mapdl /bin/bash -c "mkdir -p /mapdl_logs && echo 'Successfully created directory inside docker container'"
          docker exec mapdl /bin/bash -c "if compgen -G 'file*.out' > /dev/null ;then cp -f /file*.out /mapdl_logs && echo 'Successfully copied out files.'; fi"
          docker exec mapdl /bin/bash -c "if compgen -G 'file*.err' > /dev/null ;then cp -f /file*.err /mapdl_logs && echo 'Successfully copied err files.'; fi"
          docker exec mapdl /bin/bash -c "if compgen -G 'file*.log' > /dev/null ;then cp -f /file*.log /mapdl_logs && echo 'Successfully copied log files.'; fi"
          docker exec mapdl /bin/bash -c "if compgen -G '*.crash' > /dev/null ;then cp -f /*.crash /mapdl_logs && echo 'Successfully copied crash files.'; fi"
          docker cp mapdl:/mapdl_logs/. ./logs-build-docs/.
      
      - name: Tar logs
        if: always()
        run: |
          cp -f doc/_build/latex/*.log ./logs-build-docs/
          cp log.txt ./logs-build-docs/
          tar cvzf ./logs-build-docs.tgz ./logs-build-docs
      
      - name: Upload logs to GitHub
        if: always()
        uses: actions/upload-artifact@master
        with:
          name: logs-build-docs.tgz
          path: ./logs-build-docs.tgz

      - name: Display MAPDL Logs
        if: always()
        run: cat log.txt

      - name: List main files
        if: always()
        run: |
          if compgen -G 'doc/_build/latex/*.log' > /dev/null ;then for f in doc/_build/latex/*.log; do echo "::group:: Output latex log file $f" && cat $f && echo "::endgroup::" ; done; fi
          if compgen -G './logs-build-docs/*.err' > /dev/null ;then for f in ./logs-build-docs/*.err; do echo "::group:: Error file $f" && cat $f && echo "::endgroup::" ; done; fi
          if compgen -G './logs-build-docs/*.log' > /dev/null ;then for f in ./logs-build-docs/*.log; do echo "::group:: Log file $f" && cat $f && echo "::endgroup::" ; done; fi
          if compgen -G './logs-build-docs/*.out' > /dev/null ;then for f in ./logs-build-docs/*.out; do echo "::group:: Output file $f" && cat $f && echo "::endgroup::" ; done; fi

  release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [style, docs] #docs-style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            ./*PDF*/*.pdf
